{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/ListDeckItems.js","Layout/DisplayCards.js","Layout/StudyDeck.js","Layout/BreadCrumb.js","Layout/Form.js","Layout/Deck.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","ListDeckItems","props","useState","decks","setDecks","useEffect","abortController","AbortController","listDecks","then","elements","error","console","log","map","index","length","description","to","onClick","window","confirm","DisplayCards","StudyDeck","useParams","flip","setFlip","setIndex","setDeck","element","aria-label","aria-current","front","back","append","BreadCrumb","newItem","isDeck","Form","history","useHistory","setCard","firstInput","secondInput","inputsFromForm","setInputsFromForm","labelFirst","labelSecond","titleNewOrEdit","titleCardOrDeck","formNames","setFormNames","submitHandler","event","preventDefault","createDeck","push","updateDeck","createCard","goBack","updateCard","readCard","whatIsIt","for","placeholder","type","value","onChange","target","textAreaOrNot","Deck","dependency","setDependency","class","deleteCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd1c1c43.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\n// This is the component that is used by DisplayCards to list the deck items\nexport default function ListDeckItems(props) {\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    try {\n      listDecks(abortController.signal).then((elements) => setDecks(elements));\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"Aborted\", decks);\n      } else {\n        throw error;\n      }\n    }\n  });\n\n  return (\n    <section>\n      {decks.map((deck, index) => {\n        return (\n          <div key={index} className=\"card my-3\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">\n                {deck.name}\n                <span className=\"float-right\">{`${deck.cards.length} cards`}</span>{\" \"}\n              </h5>\n              <p className=\"card-text\">{deck.description}</p>\n              <div>\n                <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary\">\n                  View\n                </Link>\n                <Link\n                  to={`/decks/${deck.id}/study`}\n                  className=\"btn btn-primary mx-2\"\n                >\n                  Study\n                </Link>\n                <span className=\"float-right\">\n                  <button\n                    className=\"btn btn-danger\"\n                    onClick={() =>\n                      window.confirm(\"Confirm Delete?\")\n                        ? deleteDeck(deck.id)\n                        : null\n                    }\n                  >\n                    Delete\n                  </button>\n                </span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </section>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ListDeckItems from \"./ListDeckItems\";\n//This is the main page to display the deck items\nexport default function DisplayCards(props) {\n  return (\n    <div>\n      <div>\n        <Link to=\"/decks/new\" className=\"btn btn-secondary m-3\">\n          Create Deck\n        </Link>\n      </div>\n      <div className=\"container\">\n        <ListDeckItems />\n      </div>\n    </div>\n  );\n}\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\n\n// Creates the study deck component\nexport default function StudyDeck(props) {\n  const { deckId } = useParams();\n  const [flip, setFlip] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [deck, setDeck] = useState({ cards: [] });\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    try {\n      readDeck(deckId, abortController.signal).then((element) => {\n        setDeck(element);\n      });\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.log(\"Aborted\", deck);\n      } else {\n        throw error;\n      }\n    }\n  }, [deck, deckId]);\n\n  return (\n    <section className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {\" \"}\n            Study\n          </li>\n        </ol>\n      </nav>\n      <h1>{`${deck.name}: Study`}</h1>\n      {deck.cards.length < 3 ? (\n        <div>\n          <h2>Not enough cards.</h2>\n          <p>{`You need at least 3 cards to study. There are ${deck.cards.length} in this deck.`}</p>\n          <Link className=\"btn btn-primary\" to={`/decks/${deck.id}/cards/new`}>\n            Add Cards\n          </Link>\n        </div>\n      ) : flip ? (\n        <div className=\"card\" key={index}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              Card {`${index + 1} of ${deck.cards.length}`}\n            </h5>\n            <p className=\"card-text\">{deck.cards[index].front}</p>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => setFlip(!flip)}\n            >\n              Flip\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"card\" key={index}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              Card {`${index + 1} of ${deck.cards.length}`}\n            </h5>\n            <p className=\"card-text\">{deck.cards[index].back}</p>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => setFlip(!flip)}\n            >\n              Flip\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                if (index + 1 === deck.cards.length) {\n                  if (window.confirm(\"Restart cards?\")) {\n                    setIndex(0);\n                  }\n                } else {\n                  setIndex(index + 1);\n                  setFlip(true);\n                }\n              }}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// creates breadcrumbs for the form\nexport default function BreadCrumb(props) {\n  const { newItem, isDeck, deckId, cardId, deck } = props;\n  function createDeckBreadcrumb() {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n    );\n  }\n\n  function editDeckBreadcrumb() {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n    );\n  }\n\n  function addCardBreadcrumb() {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Add Card\n          </li>\n        </ol>\n      </nav>\n    );\n  }\n\n  function editCardBreadcrumb() {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {`Edit Card ${cardId}`}\n          </li>\n        </ol>\n      </nav>\n    );\n  }\n\n  return isDeck\n    ? newItem\n      ? createDeckBreadcrumb()\n      : editDeckBreadcrumb()\n    : newItem\n    ? addCardBreadcrumb()\n    : editCardBreadcrumb();\n}\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport {\n  readDeck,\n  readCard,\n  updateCard,\n  updateDeck,\n  createCard,\n  createDeck,\n} from \"../utils/api\";\n// This component makes every input form needed for this app\nexport default function Form(props) {\n  const history = useHistory();\n  const { deckId, cardId } = useParams();\n  const { newItem, isDeck } = props;\n  const [deck, setDeck] = useState({ cards: [] });\n  const [card, setCard] = useState({});\n  const [inputsFromForm, setInputsFromForm] = useState({\n    firstInput: \"\",\n    secondInput: \"\",\n  });\n  const [formNames, setFormNames] = useState({\n    labelFirst: \"\",\n    labelSecond: \"\",\n    titleNewOrEdit: \"\",\n    titleCardOrDeck: \"\",\n  });\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    if (deckId) {\n      try {\n        readDeck(deckId, abortController.signal).then((element) => {\n          setDeck(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", deck);\n        } else {\n          throw error;\n        }\n      }\n    }\n    if (cardId) {\n      try {\n        readCard(cardId, abortController.signal).then((element) => {\n          setCard(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", card);\n        } else {\n          throw error;\n        }\n      }\n    }\n  });\n\n  useEffect(() => {\n    isDeck\n      ? newItem\n        ? setFormNames({\n            titleNewOrEdit: \"Create\",\n            labelFirst: \"Name\",\n            labelSecond: \"Description\",\n            titleCardOrDeck: \"Deck\",\n          })\n        : setFormNames({\n            titleNewOrEdit: \"Edit\",\n            labelFirst: \"Name\",\n            labelSecond: \"Description\",\n            titleCardOrDeck: \"Deck\",\n          })\n      : newItem\n      ? setFormNames({\n          titleNewOrEdit: \"New\",\n          labelFirst: \"Front\",\n          labelSecond: \"Back\",\n          titleCardOrDeck: \"Card\",\n        })\n      : setFormNames({\n          titleNewOrEdit: \"Edit\",\n          labelFirst: \"Front\",\n          labelSecond: \"Back\",\n          titleCardOrDeck: \"Card\",\n        });\n  }, [isDeck, newItem]);\n\n  useEffect(() => {\n    if (isDeck && !newItem)\n      setInputsFromForm({\n        firstInput: deck.name,\n        secondInput: deck.description,\n      });\n    if (!isDeck && !newItem)\n      setInputsFromForm({ firstInput: card.front, secondInput: card.back });\n  }, [isDeck, newItem, deck.name, deck.description, card.front, card.back]);\n\n  function submitHandler(event) {\n    event.preventDefault();\n    if (newItem && isDeck) {\n      createDeck({\n        name: inputsFromForm.firstInput,\n        description: inputsFromForm.secondInput,\n      });\n      history.push(`/`);\n    } else if (!newItem && isDeck) {\n      updateDeck({\n        name: inputsFromForm.firstInput,\n        description: inputsFromForm.secondInput,\n        id: deckId,\n      });\n      history.push(`/decks/${deckId}`);\n    } else if (newItem && !isDeck) {\n      createCard(deckId, {\n        front: inputsFromForm.firstInput,\n        back: inputsFromForm.secondInput,\n      });\n      history.goBack();\n    } else {\n      updateCard({\n        ...card,\n        front: inputsFromForm.firstInput,\n        back: inputsFromForm.secondInput,\n      });\n      history.push(`/decks/${deckId}`);\n    }\n  }\n\n  function textAreaOrNot(whatIsIt, formNames) {\n    if (whatIsIt) {\n      return (\n        <div className=\"form-group\">\n          <label for=\"deckName\">{formNames.labelFirst}</label>\n          <input\n            placeholder=\"Deck Name\"\n            className=\"form-control\"\n            type=\"text\"\n            id=\"deckName\"\n            value={inputsFromForm.firstInput}\n            onChange={(event) =>\n              setInputsFromForm({\n                ...inputsFromForm,\n                firstInput: event.target.value,\n              })\n            }\n          ></input>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"form-group\">\n          <label for=\"firstTextArea\">{formNames.labelFirst}</label>\n          <textarea\n            className=\"form-control\"\n            id=\"firstTextArea\"\n            placeholder=\"Front side of card\"\n            value={inputsFromForm.firstInput}\n            onChange={(event) =>\n              setInputsFromForm({\n                ...inputsFromForm,\n                firstInput: event.target.value,\n              })\n            }\n          ></textarea>\n        </div>\n      );\n    }\n  }\n  return (\n    <section className=\"container\">\n      <BreadCrumb\n        newItem={newItem}\n        isDeck={isDeck}\n        deckId={deckId}\n        cardId={cardId}\n        deck={deck}\n      />\n      <h1>{`${formNames.titleNewOrEdit} ${formNames.titleCardOrDeck}`}</h1>\n      <form>\n        {textAreaOrNot(isDeck, formNames)}\n        <div className=\"form-group\">\n          <label for=\"secondTextArea\">{formNames.labelSecond}</label>\n          <textarea\n            className=\"form-control\"\n            id=\"secondTextArea\"\n            placeholder={isDeck ? \"Description of deck\" : \"Back side of card\"}\n            value={inputsFromForm.secondInput}\n            onChange={(event) =>\n              setInputsFromForm({\n                ...inputsFromForm,\n                secondInput: event.target.value,\n              })\n            }\n          ></textarea>\n        </div>\n        <div>\n          <button\n            className=\"btn btn-secondary\"\n            onClick={() =>\n              isDeck ? history.push(\"/\") : history.push(`/decks/${deckId}`)\n            }\n          >\n            {newItem ? \"Done\" : \"Cancel\"}\n          </button>\n          <button\n            className=\"btn btn-primary mx-2\"\n            onClick={(event) => submitHandler(event)}\n          >\n            {newItem ? \"Save\" : \"Submit\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { readDeck, deleteDeck, deleteCard } from \"../utils/api\";\n\n// This creates the View Deck Page\nexport default function Deck() {\n  const [deck, setDeck] = useState({ cards: [] });\n  const { deckId } = useParams();\n  let [dependency, setDependency] = useState(deck);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    if (deckId) {\n      try {\n        readDeck(deckId, abortController.signal).then((element) => {\n          setDeck(element);\n        });\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Aborted\", deck);\n        } else {\n          throw error;\n        }\n      }\n    }\n    if (!(dependency === deck)) setDependency(deck);\n  }, [dependency, deck, deckId]);\n\n  return (\n    <section className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {deck.name}\n          </li>\n        </ol>\n      </nav>\n      <div className=\"card my-3\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{deck.name}</h5>\n          <p className=\"card-text\">{deck.description}</p>\n          <div>\n            <Link to={`/decks/${deckId}/edit`} className=\"btn btn-secondary\">\n              Edit\n            </Link>\n            <Link\n              to={`/decks/${deck.id}/study`}\n              className=\"btn btn-primary mx-2\"\n            >\n              Study\n            </Link>\n            <Link\n              to={`/decks/${deck.id}/cards/new`}\n              className=\"btn btn-primary\"\n            >\n              Add Cards\n            </Link>\n            <span className=\"float-right\">\n              <Link\n                to=\"/\"\n                className=\"btn btn-danger\"\n                onClick={() =>\n                  window.confirm(\"Confirm Delete?\") ? deleteDeck(deck.id) : null\n                }\n              >\n                Delete\n              </Link>\n            </span>\n          </div>\n        </div>\n      </div>\n      <h1>Cards</h1>\n      <ul class=\"list-group\">\n        {deck.cards.map((card, index) => {\n          return (\n            <li key={index} class=\"list-group-item\">\n              <div className=\"row\">\n                <div className=\"col-6 d-flex-wrap\">{card.front}</div>\n                <div className=\"col-6 d-flex-wrap\">{card.back}</div>\n              </div>\n              <button\n                className=\"btn btn-danger float-right\"\n                onClick={() =>\n                  window.confirm(\n                    \"Delete this card? You will not be able to recover it.\"\n                  )\n                    ? deleteCard(card.id)\n                    : null\n                }\n              >\n                Delete\n              </button>\n              <Link\n                to={`/decks/${deckId}/cards/${card.id}/edit`}\n                className=\"btn btn-secondary float-right mx-2\"\n              >\n                Edit\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n}\n","import Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport DisplayCards from \"./DisplayCards\";\nimport { Switch, Route } from \"react-router-dom\";\nimport React, { Fragment } from \"react\";\nimport StudyDeck from \"./StudyDeck\";\nimport Form from \"./Form\";\nimport Deck from \"./Deck\";\n\n//This creates all the routes for the application\nfunction Layout() {\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DisplayCards />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <StudyDeck />\n          </Route>\n          <Route path=\"/decks/new\">\n            <Form newItem={true} isDeck={true} />\n          </Route>\n          <Route exact path=\"/decks/:deckId\">\n            <Deck />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <Form newItem={false} isDeck={true} />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <Form newItem={true} isDeck={false} />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <Form newItem={false} isDeck={false} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}